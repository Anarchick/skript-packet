plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id("io.papermc.paperweight.userdev") version "1.5.12"
}

configurations {
    shade
    compile.extendsFrom shade
}

repositories {
    maven { url 'https://papermc.io/repo/repository/maven-public/' } // paper
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots' } // Spigot
    maven { url "https://repo.dmulloy2.net/nexus/repository/public/" } // ProtocolLib
    maven { url 'https://mvnrepository.com/artifact/org.json/json' } // DataWatcher
    maven { url "https://libraries.minecraft.net" }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.skriptlang.org/releases' } // Skript
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/repositories/central' }
    mavenCentral()
}

archivesBaseName = "Skript-Packet"
group = 'fr.anarchick.skriptpacket'
version = '2.2.1'

def mcVersion = '1.20'
def mcSubVersion = '.4'
def skriptVersion = '2.8.3'
def protocolLibVersion = '5.1.0'
def skriptReflectVersion = '2.4'

def targetJavaVersion = 17

dependencies {
	compileOnly (group: 'com.github.SkriptLang', name: 'Skript', version: skriptVersion) {
        exclude group: 'com.sk89q.worldguard', module: 'worldguard-legacy'
        exclude group: 'net.milkbowl.vault', module: 'Vault'
    }
    //compileOnly group: 'org.spigotmc', name: 'spigot-api', version: mcVersion + mcSubVersion + '-R0.1-SNAPSHOT'
    compileOnly group: 'io.papermc.paper', name: 'paper-api', version: mcVersion + mcSubVersion + '-R0.1-SNAPSHOT'
    paperweight.paperDevBundle(mcVersion + mcSubVersion +'-R0.1-SNAPSHOT')
    compileOnly group: 'net.md-5', name: 'bungeecord-api', version: mcVersion + '-R0.1-SNAPSHOT'
    compileOnly group: 'com.github.TPGamesNL', name: 'skript-reflect', version: skriptReflectVersion
    compileOnly group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.600'
    compileOnly group: 'com.mojang', name: 'datafixerupper', version: '1.0.20' // ExprPair
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: protocolLibVersion
    compileOnly group: 'org.json', name: 'json', version: '20210307'
    //shade (group: 'org.json', name: 'json', version: '20210307') Now include in plugin.yml
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    exclude('fr/anarchick/skriptpacket/elements/deprecated/**')
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
            exclude '**/*.yml'
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

task export() {
    group = "other"
    description = "build gradle into external folder"
    def fromFile = 'build/libs/'+archivesBaseName+'-'+version+'.jar'
    def destinations = [
            'C:/Users/aeim/Documents/minecraft/SkriptPacket/eclipse1.17/plugins',
            'C:/Users/aeim/Documents/minecraft/SkriptPacket/eclipse1.18/plugins',
            'C:/Users/aeim/Documents/minecraft/SkriptPacket/eclipse1.19/plugins',
            'C:/Users/aeim/Documents/minecraft/SkriptPacket/1.20.4/plugins'
    ]
    doLast {
        destinations.each {dest ->
            def destDir = file(dest)
            if (destDir.exists()) {
                copy {
                    from fromFile
                    into destDir
                }
            } else {
                println "The folder '" + destDir + "' does not exist"
            }
        }
    }
}

build.finalizedBy export
reobfJar.finalizedBy export