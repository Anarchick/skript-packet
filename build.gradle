plugins {
    id("com.gradleup.shadow") version "8.3.3"
    id ("base")
    id("java-library")
    id("maven-publish")
    id("io.papermc.paperweight.userdev") version "2.0.0-beta.14"
}

repositories {
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots' } // Spigot
    maven { url 'https://repo.dmulloy2.net/nexus/repository/public/' } // ProtocolLib
    maven { url 'https://mvnrepository.com/artifact/org.json/json' } // DataWatcher

    maven { url 'https://repo.skriptlang.org/releases' } // Skript
    maven { url 'https://jitpack.io' }

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/repositories/central' }
    maven {
        name = "jeffMediaPublic"
        url = uri("https://repo.jeff-media.com/public")
    }
    mavenCentral()
    maven { url 'https://libraries.minecraft.net' } // must be last to avoid conflicts
}

base {
    archivesName = "Skript-Packet"
    setVersion("3.0.0")
    setGroup("fr.anarchick.skriptpacket")
}

//version = '3.0.0'
//group = 'fr.anarchick.skriptpacket'

def mcVersion = '1.21'
def mcSubVersion = '.4'
def skriptVersion = '2.10.0'
def protocolLibVersion = '5.3.0'
def skriptReflectVersion = '2.4-dev1'

dependencies {
    compileOnly (group: 'com.github.SkriptLang', name: 'Skript', version: skriptVersion) {
        exclude group: 'com.sk89q.worldguard', module: 'worldguard-legacy'
        exclude group: 'net.milkbowl.vault', module: 'Vault'
    }
    compileOnly group: 'net.md-5', name: 'bungeecord-api', version: mcVersion + '-R0.1-SNAPSHOT'
    compileOnly group: 'com.github.SkriptLang', name: 'skript-reflect', version: skriptReflectVersion
    compileOnly group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.600'
    compileOnly group: 'com.mojang', name: 'datafixerupper', version: '1.0.20' // ExprPair
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: protocolLibVersion
    compileOnly group: 'org.json', name: 'json', version: '20231013'
    implementation("com.jeff_media:SpigotUpdateChecker:3.0.3")
    paperweight.paperDevBundle(mcVersion + mcSubVersion +'-R0.1-SNAPSHOT')
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

tasks {
    compileJava {
        // Set the release flag. This configures what version bytecode the compiler will emit, as well as what JDK APIs are usable.
        // See https://openjdk.java.net/jeps/247 for more information.
        options.release = 21
    }
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    relocate 'com.jeff_media.updatechecker', 'fr.anarchick.skriptpacket.updatechecker'
}

sourceSets {
    main {
        java {
            exclude 'fr/anarchick/skriptpacket/elements/deprecated/**'
        }
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    // Ensure filtering is applied correctly
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

tasks.register('export') {
    group = "other"
    description = "build gradle into external folder"
    def userHome = System.getenv('USERPROFILE').replace('\\', '/')
    def fromFile = 'build/libs/' + base.archivesName.get() + '-' + version + '-all.jar'
    // List of version folder to export the jar
    def versions = ['1.20.1', '1.21.1', '1.21.4']
    doLast {
        versions.each { ver ->
            def destDir = file(userHome + '/Documents/minecraft/SkriptPacket/' + ver + '/plugins')
            if (destDir.exists()) {
                copy {
                    from fromFile
                    into destDir
                    rename { String fileName ->
                        fileName.replace('-all.jar', '.jar')
                    }
                }
            } else {
                println "The folder '" + destDir + "' does not exist"
            }
        }
    }
}

tasks.build.finalizedBy(tasks.export)
tasks.shadowJar.finalizedBy(tasks.export)